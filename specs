Server's client management
managing workers:
- maintain worker's status [waiting, busy, error]

Consider how all the messages will be broadcasted.
- all messages through one channel (client will be responsible for displaying them)

Add pinging clients if there is no message from them every _PERIOD seconds


1. The command
Start specific job
Stop specific job
Stop all jobs

job_name: str
workers_count: int [optional]

1.1 command comes from master and is sent to destination (specific workers or all of them)
Always check for available workers.
If available workers are not enough, schedule the job in a Queue, don't start any next job until
there is enough workers, then run the job.

---

2. The job
Performed only by Workers, results sent to all the clients.

2.1 Parameters
name: str

required number of workers: int [minimal predefined, optionally specified by command]
- single or multiple workers

2.2 Types of job
- challenge: compare work time or anything you can compare between results from different workers
- heavy: distribute task between workers
- regular: nothing specific, just work

---

3. Users
3.1 Client
Receives messages only

3.2 Master
Sends commands and receives messages

3.3 Worker
Receives commands
Sends job results when results are ready
Sends self-info (status, CPU usage, memory usage, etc.) every _PERIOD seconds

---

4. Message
Sent over the channel

* In case of sending images, should client distinguish the difference between str and bytes
or should there be preceeding message indicating the following message will be bytes

4.1 Format

message = {
	"type": "MessageType [authentication, info, message, command, error]",
	"payload": "Union[bytes, str]",
	"source": "ID",
	"destination": "Union[ID, Group]",
	"*status": "[if source Worker] - WorkerStatus[Waiting, Busy]",
	"*job_name": "[if type command] - constants.JobName",
}

# Start test job message example
command_message = {
	"type": MessageType.Command,
	"command": Command.StartJob,
	"job_name": JobName.TestJob,
	"args": Optional[str]
}

# Stop job message example
command_message = {
	"type": MessageType.Command,
	"command": Command.StopJob,
}
